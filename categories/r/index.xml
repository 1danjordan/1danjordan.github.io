<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on Dan Jordan</title>
    <link>/categories/r/</link>
    <description>Recent content in R on Dan Jordan</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 01 Mar 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Ainmneacha Naíonán na hÉireann</title>
      <link>/post/ainmneacha-na%C3%ADon%C3%A1n-na-h%C3%A9ireann/</link>
      <pubDate>Fri, 01 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>/post/ainmneacha-na%C3%ADon%C3%A1n-na-h%C3%A9ireann/</guid>
      <description>I’ve made a new R package called irishbabynames. Install it with:
remotes::install_github(&amp;quot;1danjordan/irishbabynames&amp;quot;) This package contains three datasets:
 babynames - count of each baby name in Ireland from 1964 migration - migration statistics by gender and age group from 1987 population - population statistics by sex and age from 1926  This is only available on Github and I’ve no plans on publishing it on CRAN for the moment. I’ve wanted to make a data package for a while now, and this week the Irish CSO had a big press release about the statistics for 2018.</description>
    </item>
    
    <item>
      <title>Releasing Experimental-R 3.4</title>
      <link>/post/2017-05-04-experimental-r/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-05-04-experimental-r/</guid>
      <description>Recently I’ve been delving into the depths of R, while learning Docker and even getting to know Linux much better. The result is Experimental-R, a docker image with an experimental build of R 3.4. Below is Experimental-R’s README, read on for details!
Experimental-R git clone https://github.com/dandermotj/experimental-r.git cd experimental-r docker build -t experimental-r . docker run --rm -ti experimental-r experimental-r-demo
 Experimental-R contains Dockerfiles for customised R builds. Inspired by the Rocker project, Experimental-R conveniently lets users try out experimental R builds without having to compile R from source themselves.</description>
    </item>
    
    <item>
      <title>Visualising Collatz</title>
      <link>/post/2017-05-21-visualising-collatz/</link>
      <pubDate>Sun, 21 May 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-05-21-visualising-collatz/</guid>
      <description>Visualising Collatz In previous posts I used the Collatz conjecture as an example for writing:
 safe recursion and memoisation tidy summary functions  Now I’m going to build further on this example and finally visualise the hailstone sequence. I’m going to use ggplot and Plotly’s R package plotly to create some really nice interactive charts. The plotly package is the easiest way to turning your graphs from static to interactive, and the ggplot to plotly conversion is perfect in nearly all the times I’ve used it.</description>
    </item>
    
    <item>
      <title>Book Review: Introduction to Empirical Bayes</title>
      <link>/post/2017-04-03-book-review-introduction-to-empirical-bayes/</link>
      <pubDate>Mon, 03 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-04-03-book-review-introduction-to-empirical-bayes/</guid>
      <description>“Have you ever tried to learn math from Wikipedia?”.
  -- -- -- This is how David Robinson opens his tremendous book Introduction to Empirical Bayes. This sentiment is the foundation the book builds on; learning through terse academic text is hard, learning through interactive, motivated and visual problems is fun. Robinson’s book moves at a perfect pace, within a familiar context (the R console) using an intuitive example set (baseball).</description>
    </item>
    
    <item>
      <title>Tidy Summary Functions with Collatz</title>
      <link>/post/2016-12-05-tidy-summary-with-collatz/</link>
      <pubDate>Mon, 05 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-12-05-tidy-summary-with-collatz/</guid>
      <description>⊕The chart below is a directed graph showing the orbits of the first 1,000 numbers of the Collatz sequence
 -- -- -- In a previous post I wrote about recursion in R and used the Collatz sequence as a case study. Now I want to further this case study into tidy summary functions.
I’ve been thinking about what a modern summary function should look like. Summaries for objects like model outputs and data frames are useful for looking at in the console, but it’s hard to compute with them.</description>
    </item>
    
    <item>
      <title>Type Checking in R with TypeCheck</title>
      <link>/post/2016-10-27-type-checking-with-typecheck/</link>
      <pubDate>Thu, 27 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-10-27-type-checking-with-typecheck/</guid>
      <description>Jim Hester’s TypeCheck package brings type checking to R in a simple and elegant way and provides meaningful error messages out of the box. TypeCheck is built on the ? operator from Hester’s types package.
R is a dynamically typed language. Being dynamically typed is an important and necessary design choice for R as an interactive programming environment. However, the option to enforce types makes larger, more complicated codebases easier to debug and expand.</description>
    </item>
    
    <item>
      <title>Recursion in R with Collatz</title>
      <link>/post/2016-11-15-recursion-in-r-with-collatz/</link>
      <pubDate>Sat, 15 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-11-15-recursion-in-r-with-collatz/</guid>
      <description>The Collatz Conjecture Recently I was watching Numberphile’s video on the Collatz Conjecture.
 It got me thinking about how I would generate the hailstone sequence in R. This sequence is interesting because it is recursive, the length of the vector outputted is unknown and it always returns to 1. Recursion is not commonly seen in R unlike other functional languages like Scala or Haskell where you can’t turn around without knocking into it.</description>
    </item>
    
  </channel>
</rss>